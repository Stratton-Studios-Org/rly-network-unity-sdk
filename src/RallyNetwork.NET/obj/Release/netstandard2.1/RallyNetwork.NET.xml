<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RallyNetwork.NET</name>
    </assembly>
    <members>
        <member name="T:RallyProtocol.Accounts.AccountExtensions">
            <summary>
            Helper extensions and methods for <see cref="T:Nethereum.Web3.Accounts.Account"/> class.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.AccountExtensions.SignTypedDataV4(Nethereum.Web3.Accounts.Account,Nethereum.ABI.EIP712.TypedDataRaw)">
            <summary>
            Signs a raw typed data.
            </summary>
            <param name="account">The signer account</param>
            <param name="eip712Data">The data to sign</param>
            <returns>Returns the signature</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.AccountExtensions.SignTypedDataV4``1(Nethereum.Web3.Accounts.Account,Nethereum.ABI.EIP712.TypedData{``0})">
            <summary>
            Signs a typed data using a <see cref="T:Nethereum.ABI.EIP712.Domain"/> type.
            </summary>
            <typeparam name="TDomain">The domain type</typeparam>
            <param name="account">The signer account</param>
            <param name="eip712Data">The data to sign</param>
            <returns>Returns the signature</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.AccountExtensions.SignTypedData``1(Nethereum.Web3.Accounts.Account,Nethereum.ABI.EIP712.TypedData{``0})">
            <summary>
            Signs a typed data using a <see cref="T:Nethereum.ABI.EIP712.Domain"/> type.
            </summary>
            <typeparam name="TDomain">The domain type</typeparam>
            <param name="account">The signer account</param>
            <param name="eip712Data">The data to sign</param>
            <returns>Returns the signature</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.AccountExtensions.SignMessage(Nethereum.Web3.Accounts.Account,System.Byte[])">
            <summary>
            Signs a raw message data.
            </summary>
            <param name="account">The signer account</param>
            <param name="message">The raw data</param>
            <returns>Returns the signature</returns>
        </member>
        <member name="P:RallyProtocol.Accounts.CreateAccountOptions.Overwrite">
            <summary>
            Whether to overwrite the existing account if there are any.
            </summary>
        </member>
        <member name="P:RallyProtocol.Accounts.CreateAccountOptions.StorageOptions">
            <summary>
            The key storage options
            </summary>
        </member>
        <member name="T:RallyProtocol.Accounts.IRallyAccountManager">
            <summary>
            Manages Rally's EOA wallet/account.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.CreateAccountAsync(RallyProtocol.Accounts.CreateAccountOptions)">
            <summary>
            Creates a new wallet and saves it to the device based on the storage options provided.
            If a wallet already exists, it will throw an error unless the overwrite flag is set to true.
            If the overwrite flag is set to true, the existing wallet will be overwritten with the new wallet.
            KeyStorageConfig is used to specify the storage options for the wallet.
            If no storage options are provided, the default options of attmpting to save to cloud and rejecting on cloud save failure will be used.
            The rejectOnCloudSaveFailure flag is used to specify whether to reject the wallet creation if the cloud save fails.
            when set to true, the promise will reject if the cloud save fails. When set to false, the promise will resolve even if the cloud save fails and the wallet will be stored only on device.
            The saveToCloud flag is used to specify whether to save the wallet to cloud or not. When set to true, the wallet will be saved to cloud. When set to false, the wallet will be saved only on device.
            After the wallet is created, you can check the cloud backup status of the wallet using the walletBackedUpToCloud method.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.ImportExistingAccountAsync(System.String,RallyProtocol.Accounts.CreateAccountOptions)">
            <summary>
            Imports an existing mnemonic phrase and creates a wallet from that.
            </summary>
            <param name="mnemonic">The mnemonic phrase to import and create account from</param>
            <param name="options">The create account options</param>
            <returns>Returns a newly created account from the mnemonic</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.IsWalletBackedUpToCloudAsync">
             <summary>
             Returns the cloud backup status of the existing wallet.
             Returns false if there is currently no wallet. This method should not be used as a check for wallet existence
             as it will return false if there is no wallet or if the wallet does exist but is not backed up to cloud.
            
             If a wallet already exists the reponse will be true or false depending on whether the wallet is backed up to cloud or not.
             TRUE response means wallet is backed up to cloud, FALSE means wallet is not backed up to cloud.
             </summary>
             <returns></returns>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.GetAccountAsync">
            <summary>
            Checks if there is any account currently loaded, if not, checks if there are any mnemonic stored and if there are no mnemonic stored, returns null, otherwise creates a new account based on the mnemonic and caches it for further calls.
            </summary>
            <returns>Returns the existing account or the newly created account</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.GetPublicAddressAsync">
            <summary>
            Gets account's public address.
            </summary>
            <returns>Returns the existing account's public address, otherwise null</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.PermanentlyDeleteAccountAsync">
            <summary>
            Permanently deletes the account.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.GetAccountPhraseAsync">
            <summary>
            Gets the account mnemonic/seed phrase.
            </summary>
            <returns>Returns the account mnemonic/seed phrase if it exists, otherwise null</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.SignMessageAsync(System.String)">
            <summary>
            Signs the message using the existing account's private key.
            </summary>
            <param name="message">The message to sign</param>
            <returns>Returns the signed message</returns>
            <exception cref="T:System.Exception">Thrown when there is no existing account</exception>
        </member>
        <member name="M:RallyProtocol.Accounts.IRallyAccountManager.SignTransactionAsync``1(``0)">
            <summary>
            Signs the transaction using the existing account's private key.
            </summary>
            <typeparam name="T">The transaction type</typeparam>
            <param name="transaction">The transaction</param>
            <returns>Returns the signature</returns>
            <exception cref="T:System.Exception">Thrown when there is no existing account</exception>
        </member>
        <member name="T:RallyProtocol.Accounts.RallyAccountManager">
            <summary>
            The default implementation of <see cref="T:RallyProtocol.Accounts.IRallyAccountManager"/>.
            </summary>
        </member>
        <member name="F:RallyProtocol.Accounts.RallyAccountManager.currentAccount">
            <summary>
            Current active account.
            </summary>
        </member>
        <member name="F:RallyProtocol.Accounts.RallyAccountManager.logger">
            <summary>
            The custom logger.
            </summary>
        </member>
        <member name="F:RallyProtocol.Accounts.RallyAccountManager.keyManager">
            <summary>
            The platform's key manager.
            </summary>
        </member>
        <member name="P:RallyProtocol.Accounts.RallyAccountManager.CurrentAccount">
            <summary>
            Gets the currently active account.
            </summary>
        </member>
        <member name="P:RallyProtocol.Accounts.RallyAccountManager.Logger">
            <summary>
            Gets the logger instance used.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.#ctor(RallyProtocol.Core.IPlatformKeyManager,RallyProtocol.Logging.IRallyLogger)">
            <summary>
            Creates a new instance of <see cref="T:RallyProtocol.Accounts.RallyAccountManager"/>
            </summary>
            <param name="keyManager">The platform key manager</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.SaveMnemonicAsync(System.String,RallyProtocol.Accounts.CreateAccountOptions)">
            <summary>
            Saves the mnemonic to disk/cloud based on the platform using <see cref="T:RallyProtocol.Core.IPlatformKeyManager"/>.
            </summary>
            <param name="mnemonic">The mnemonic to save</param>
            <param name="options">The options</param>
            <returns>Returns the newly created account based on the mnemonic before storage</returns>
            <exception cref="T:System.Exception">Thrown when the account already exists and the <see cref="P:RallyProtocol.Accounts.CreateAccountOptions.Overwrite"/> flag is not set</exception>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.CreateAccountAsync(RallyProtocol.Accounts.CreateAccountOptions)">
            <summary>
            Creates a new wallet and saves it to the device based on the storage options provided.
            If a wallet already exists, it will throw an error unless the overwrite flag is set to true.
            If the overwrite flag is set to true, the existing wallet will be overwritten with the new wallet.
            KeyStorageConfig is used to specify the storage options for the wallet.
            If no storage options are provided, the default options of attmpting to save to cloud and rejecting on cloud save failure will be used.
            The rejectOnCloudSaveFailure flag is used to specify whether to reject the wallet creation if the cloud save fails.
            when set to true, the promise will reject if the cloud save fails. When set to false, the promise will resolve even if the cloud save fails and the wallet will be stored only on device.
            The saveToCloud flag is used to specify whether to save the wallet to cloud or not. When set to true, the wallet will be saved to cloud. When set to false, the wallet will be saved only on device.
            After the wallet is created, you can check the cloud backup status of the wallet using the walletBackedUpToCloud method.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.ImportExistingAccountAsync(System.String,RallyProtocol.Accounts.CreateAccountOptions)">
            <summary>
            Imports an existing mnemonic phrase and creates a wallet from that.
            </summary>
            <param name="mnemonic">The mnemonic phrase to import and create account from</param>
            <param name="options">The create account options</param>
            <returns>Returns a newly created account from the mnemonic</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.IsWalletBackedUpToCloudAsync">
             <summary>
             Returns the cloud backup status of the existing wallet.
             Returns false if there is currently no wallet. This method should not be used as a check for wallet existence
             as it will return false if there is no wallet or if the wallet does exist but is not backed up to cloud.
            
             If a wallet already exists the reponse will be true or false depending on whether the wallet is backed up to cloud or not.
             TRUE response means wallet is backed up to cloud, FALSE means wallet is not backed up to cloud.
             </summary>
             <returns></returns>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.GetAccountAsync">
            <summary>
            Checks if there is any account currently loaded, if not, checks if there are any mnemonic stored and if there are no mnemonic stored, returns null, otherwise creates a new account based on the mnemonic and caches it for further calls.
            </summary>
            <returns>Returns the existing account or the newly created account</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.GetPublicAddressAsync">
            <summary>
            Gets account's public address.
            </summary>
            <returns>Returns the existing account's public address, otherwise null</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.PermanentlyDeleteAccountAsync">
            <summary>
            Permanently deletes the account.
            </summary>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.GetAccountPhraseAsync">
            <summary>
            Gets the account mnemonic/seed phrase.
            </summary>
            <returns>Returns the account mnemonic/seed phrase if it exists, otherwise null</returns>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.SignMessageAsync(System.String)">
            <summary>
            Signs the message using the existing account's private key.
            </summary>
            <param name="message">The message to sign</param>
            <returns>Returns the signed message</returns>
            <exception cref="T:System.Exception">Thrown when there is no existing account</exception>
        </member>
        <member name="M:RallyProtocol.Accounts.RallyAccountManager.SignTransactionAsync``1(``0)">
            <summary>
            Signs the transaction using the existing account's private key.
            </summary>
            <typeparam name="T">The transaction type</typeparam>
            <param name="transaction">The transaction</param>
            <returns>Returns the signature</returns>
            <exception cref="T:System.Exception">Thrown when there is no existing account</exception>
        </member>
        <member name="T:RallyProtocol.Core.IPlatformKeyManager">
            <summary>
            A native key manager interface, implement this on each platform to add support for key storage and generation.
            </summary>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.GetBundleId">
            <summary>
            Gets the bundle ID.
            </summary>
            <returns>Returns the bundle ID</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.GetMnemonic">
            <summary>
            Getst the saved mnemonic phrase if there are any.
            </summary>
            <returns>Returns the saved mnemonic phrase, otherwise null</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.GenerateNewMnemonic">
            <summary>
            Generates a new mnemonic phrase natively.
            </summary>
            <returns>Returns a newly generated mnemonic phrase</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.SaveMnemonic(System.String,RallyProtocol.Core.KeyStorageConfig)">
            <summary>
            Saves the mnemonic phrase locally natively.
            </summary>
            <param name="mnemonic">The mnemonic to save</param>
            <param name="options">The storage options</param>
            <returns>Returns true if successful, otherwise false</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.DeleteMnemonic">
            <summary>
            Deletes the currently stored mnemonic phrase.
            </summary>
            <returns>Returns true if deleted, otherwise false</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.IsMnemonicBackedUpToCloud">
            <summary>
            Checks whether the mnemonic is backed up to the cloud.
            </summary>
            <returns>Returns true if is backed up, otherwise false</returns>
        </member>
        <member name="M:RallyProtocol.Core.IPlatformKeyManager.GetPrivateKeyFromMnemonic(System.String)">
            <summary>
            Gets the private key from menonic phrase.
            </summary>
            <param name="mnemonic">The mnemonic phrase</param>
            <returns>Returns the private key if successful, otherwise null</returns>
        </member>
        <member name="T:RallyProtocol.Core.IRallyHttpHandler">
            <summary>
            Custom HTTP request handler for Rally SDK.
            </summary>
        </member>
        <member name="M:RallyProtocol.Core.IRallyHttpHandler.PostJson(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a POST JSON request.
            </summary>
            <param name="url">The URL</param>
            <param name="json">The JSON data</param>
            <param name="headers">The headers</param>
            <returns>Returns the HTTP request response</returns>
        </member>
        <member name="M:RallyProtocol.Core.IRallyHttpHandler.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a GET request.
            </summary>
            <param name="url">The URL</param>
            <param name="headers">The headers</param>
            <returns>Returns the HTTP request response</returns>
        </member>
        <member name="T:RallyProtocol.Core.RallyHttpResponse">
            <summary>
            A generic HTTP response.
            </summary>
        </member>
        <member name="T:RallyProtocol.Core.IRallyWeb3Provider">
            <summary>
            A web3/eth provider, implement this interface to customize the Web3 and RPC client.
            </summary>
        </member>
        <member name="M:RallyProtocol.Core.IRallyWeb3Provider.GetWeb3(RallyProtocol.Networks.RallyNetworkConfig)">
            <summary>
            Creates a new instance of <see cref="T:Nethereum.Web3.Web3"/> using the provided <see cref="T:RallyProtocol.Networks.RallyNetworkConfig"/>.
            </summary>
            <param name="config">The network configuration</param>
            <returns>Returns a new instance of <see cref="T:Nethereum.Web3.Web3"/></returns>
        </member>
        <member name="M:RallyProtocol.Core.IRallyWeb3Provider.GetWeb3(Nethereum.Web3.Accounts.Account,RallyProtocol.Networks.RallyNetworkConfig)">
            <summary>
            Creates a new instance of <see cref="T:Nethereum.Web3.Web3"/> using the provided <see cref="T:RallyProtocol.Networks.RallyNetworkConfig"/> and <see cref="T:Nethereum.Web3.Accounts.Account"/>.
            </summary>
            <param name="account">The Web3 account</param>
            <param name="config">The network configuration</param>
            <returns>Returns a new instance of <see cref="T:Nethereum.Web3.Web3"/></returns>
        </member>
        <member name="M:RallyProtocol.Core.IRallyWeb3Provider.GetRpcClient(RallyProtocol.Networks.RallyNetworkConfig)">
            <summary>
            Creates a new RPC client using the provided <see cref="T:RallyProtocol.Networks.RallyNetworkConfig"/>.
            </summary>
            <param name="config">The network configuration</param>
            <returns>Returns a new RPC client instance</returns>
        </member>
        <member name="T:RallyProtocol.Core.UnsupportedPlatformKeyManager">
            <summary>
            Unsupported platform key manager.
            </summary>
        </member>
        <member name="T:RallyProtocol.Extensions.RelayRequestExtensions">
            <summary>
            Extensions for <see cref="T:RallyProtocol.Contracts.RelayHub.RelayRequest"/> type.
            </summary>
        </member>
        <member name="M:RallyProtocol.Extensions.RelayRequestExtensions.Clone(RallyProtocol.Contracts.RelayHub.RelayRequest)">
            <summary>
            Creates a new instance and copies all properties.
            </summary>
            <param name="relayRequest">The instance to clone</param>
            <returns>Returns the cloned instance</returns>
        </member>
        <member name="T:RallyProtocol.Extensions.RelayDataExtensions">
            <summary>
            Extensions for <see cref="T:RallyProtocol.Contracts.RelayHub.RelayData"/> type.
            </summary>
        </member>
        <member name="M:RallyProtocol.Extensions.RelayDataExtensions.Clone(RallyProtocol.Contracts.RelayHub.RelayData)">
            <summary>
            Creates a new instance and copies all properties.
            </summary>
            <param name="data">The instance to clone</param>
            <returns>Returns the cloned instance</returns>
        </member>
        <member name="T:RallyProtocol.Extensions.ForwardRequestExtensions">
            <summary>
            Extensions for <see cref="T:RallyProtocol.Contracts.Forwarder.ForwardRequest"/> type.
            </summary>
        </member>
        <member name="M:RallyProtocol.Extensions.ForwardRequestExtensions.Clone(RallyProtocol.Contracts.Forwarder.ForwardRequest)">
            <summary>
            Creates a new instance and copies all properties.
            </summary>
            <param name="forwardRequest">The instance to clone</param>
            <returns>Returns the cloned instance</returns>
        </member>
        <member name="T:RallyProtocol.GsnTransactionDetails">
            <summary>
            Rally's GSN transaction details.
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.From">
            <summary>
            User's address
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.Data">
            <summary>
            Transaction data
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.To">
            <summary>
            Contract address
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.Value">
            <summary>
            Ether value
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.Gas">
            <summary>
            Optional gas
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.MaxFeePerGas">
            <summary>
            Should be in hex format.
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.MaxPriorityFeePerGas">
            <summary>
            Should be in hex format.
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.PaymasterData">
            <summary>
            Paymaster contract address.
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.ClientId">
            <summary>
            Value used to identify applications in RelayRequests.
            </summary>
        </member>
        <member name="P:RallyProtocol.GsnTransactionDetails.UseGSN">
            <summary>
            Set to 'false' to create a direct transaction.
            </summary>
            <remarks>
            Optional parameter for relay providers only.
            </remarks>
        </member>
        <member name="M:RallyProtocol.GsnTransactionDetails.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RallyProtocol.GsnTransactionDetails"/>
            </summary>
        </member>
        <member name="M:RallyProtocol.GsnTransactionDetails.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Create a new instance of <see cref="T:RallyProtocol.GsnTransactionDetails"/>
            </summary>
            <param name="from">From address</param>
            <param name="data">Transaction data</param>
            <param name="to">To address</param>
            <param name="maxFeePerGas">Max fee per gas</param>
            <param name="maxPriorityFeePerGas">Max priority fee per gas</param>
            <param name="value">Value</param>
            <param name="gas">Gas</param>
            <param name="paymasterData">Paymaster data</param>
            <param name="clientId">Client ID</param>
            <param name="useGsn">Use GSN</param>
        </member>
        <member name="M:RallyProtocol.GsnTransactionDetails.ToString">
            <summary>
            Returns the string representation of <see cref="T:RallyProtocol.GsnTransactionDetails"/>
            </summary>
            <returns>Returns the transaction as string</returns>
        </member>
        <member name="T:RallyProtocol.Utilities.HexUtility">
            <summary>
            Hexadecimal utilities.
            </summary>
        </member>
    </members>
</doc>
